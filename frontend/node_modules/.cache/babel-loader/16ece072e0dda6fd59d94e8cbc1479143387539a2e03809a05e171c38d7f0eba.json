{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL;\nexport const login = createAsyncThunk('auth/login', async ({\n  email,\n  password\n}, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await axios.post(`${API_URL}/auth/login`, {\n      email,\n      password\n    });\n    return response.data;\n  } catch (error) {\n    return rejectWithValue(error.response.data);\n  }\n});\nexport const register = createAsyncThunk('auth/register', async ({\n  username,\n  email,\n  password\n}, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await axios.post(`${API_URL}/auth/register`, {\n      username,\n      email,\n      password\n    });\n    return response.data;\n  } catch (error) {\n    return rejectWithValue(error.response.data);\n  }\n});\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState: {\n    user: null,\n    token: null,\n    status: 'idle',\n    error: null\n  },\n  reducers: {\n    logout: state => {\n      state.user = null;\n      state.token = null;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(login.pending, state => {\n      state.status = 'loading';\n    }).addCase(login.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.user = action.payload.user;\n      state.token = action.payload.token;\n    }).addCase(login.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.payload.message;\n    }).addCase(register.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.user = action.payload.user;\n      state.token = action.payload.token;\n    });\n  }\n});\nexport const {\n  logout\n} = authSlice.actions;\nexport default authSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axios","API_URL","process","env","REACT_APP_API_URL","login","email","password","rejectWithValue","response","post","data","error","register","username","authSlice","name","initialState","user","token","status","reducers","logout","state","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","message","actions","reducer"],"sources":["/home/maxwell/final-project/tv-series-movies-club/frontend/src/features/auth/authSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\n\nconst API_URL = process.env.REACT_APP_API_URL;\n\nexport const login = createAsyncThunk('auth/login', async ({ email, password }, { rejectWithValue }) => {\n  try {\n    const response = await axios.post(`${API_URL}/auth/login`, { email, password });\n    return response.data;\n  } catch (error) {\n    return rejectWithValue(error.response.data);\n  }\n});\n\nexport const register = createAsyncThunk('auth/register', async ({ username, email, password }, { rejectWithValue }) => {\n  try {\n    const response = await axios.post(`${API_URL}/auth/register`, { username, email, password });\n    return response.data;\n  } catch (error) {\n    return rejectWithValue(error.response.data);\n  }\n});\n\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState: {\n    user: null,\n    token: null,\n    status: 'idle',\n    error: null,\n  },\n  reducers: {\n    logout: (state) => {\n      state.user = null;\n      state.token = null;\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(login.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(login.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        state.user = action.payload.user;\n        state.token = action.payload.token;\n      })\n      .addCase(login.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.payload.message;\n      })\n      .addCase(register.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        state.user = action.payload.user;\n        state.token = action.payload.token;\n      });\n  },\n});\n\nexport const { logout } = authSlice.actions;\nexport default authSlice.reducer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}